add_water(detect_water(elmat), color = "lightblue") %>%
add_shadow(cloud_shade(elmat, zscale = 10, start_altitude = 500, end_altitude = 1000,), 0) %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 135, zoom = 0.75, phi = 45, windowsize = c(1000, 800),
background="darkred")
install.packages(rayrender)
install.packages("rayrender")
install.packages("rayshader")
install.packages("rayshader")
library(rayshader)
#Here, I load a map with the raster package.
loadzip = tempfile()
download.file("https://tylermw.com/data/dem_01.tif.zip", loadzip)
localtif = raster::raster(unzip(loadzip, "dem_01.tif"))
unlink(loadzip)
#And convert it to a matrix:
elmat = raster_to_matrix(localtif)
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "lightblue") %>%
add_shadow(cloud_shade(elmat, zscale = 10, start_altitude = 500, end_altitude = 1000,), 0) %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 135, zoom = 0.75, phi = 45, windowsize = c(1000, 800),
background="darkred")
install.packages("remotes")
remotes::install_github("tylermorganwall/rayshader")
library(rayshader)
#Here, I load a map with the raster package.
loadzip = tempfile()
download.file("https://tylermw.com/data/dem_01.tif.zip", loadzip)
localtif = raster::raster(unzip(loadzip, "dem_01.tif"))
unlink(loadzip)
#And convert it to a matrix:
elmat = raster_to_matrix(localtif)
#We use another one of rayshader's built-in textures:
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "lightblue") %>%
add_shadow(cloud_shade(elmat, zscale = 10, start_altitude = 500, end_altitude = 1000,), 0) %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 135, zoom = 0.75, phi = 45, windowsize = c(1000, 800),
background="darkred")
view(iris)
View(iris)
pairs(iris)
pairs(iris, col=iris$Species)
install.packages("rethinking")
install.packages(c("BH", "brew", "brio", "cli", "coda", "commonmark", "compositions", "cpp11", "curl", "data.table", "datamods", "DBI", "desc", "digest", "e1071", "esquisse", "expm", "fansi", "fftw", "fpc", "future", "gdtools", "geometries", "gert", "ggrepel", "glue", "haven", "htmlwidgets", "httpuv", "igraph", "insight", "later", "listenv", "magick", "maps", "markdown", "nanoarrow", "patchwork", "phytools", "pkgbuild", "pkgload", "plotly", "processx", "progress", "proj4", "ps", "R.oo", "ragg", "raster", "rayimage", "rayrender", "rayvertex", "Rcpp", "RCurl", "readr", "reprex", "rlang", "robustbase", "roxygen2", "s2", "sandwich", "sass", "sf", "sfheaders", "shinyWidgets", "sp", "stringi", "terra", "testthat", "tidyr", "timechange", "uuid", "vctrs", "viridis", "vroom", "warbleR", "withr", "xml2", "yaml", "zip"))
install.packages(c("BH", "brew", "brio", "cli", "coda", "commonmark", "compositions", "cpp11", "curl", "data.table", "datamods", "DBI", "desc", "digest", "e1071", "esquisse", "expm", "fansi", "fftw", "fpc", "future", "gdtools", "geometries", "gert", "ggrepel", "glue", "haven", "htmlwidgets", "httpuv", "igraph", "insight", "later", "listenv", "magick", "maps", "markdown", "nanoarrow", "patchwork", "phytools", "pkgbuild", "pkgload", "plotly", "processx", "progress", "proj4", "ps", "R.oo", "ragg", "raster", "rayimage", "rayrender", "rayvertex", "Rcpp", "RCurl", "readr", "reprex", "rlang", "robustbase", "roxygen2", "s2", "sandwich", "sass", "sf", "sfheaders", "shinyWidgets", "sp", "stringi", "terra", "testthat", "tidyr", "timechange", "uuid", "vctrs", "viridis", "vroom", "warbleR", "withr", "xml2", "yaml", "zip"))
install.packages(c("BH", "brew", "brio", "cli", "coda", "commonmark", "compositions", "cpp11", "curl", "data.table", "datamods", "DBI", "desc", "digest", "e1071", "esquisse", "expm", "fansi", "fftw", "fpc", "future", "gdtools", "geometries", "gert", "ggrepel", "glue", "haven", "htmlwidgets", "httpuv", "igraph", "insight", "later", "listenv", "magick", "maps", "markdown", "nanoarrow", "patchwork", "phytools", "pkgbuild", "pkgload", "plotly", "processx", "progress", "proj4", "ps", "R.oo", "ragg", "raster", "rayimage", "rayrender", "rayvertex", "Rcpp", "RCurl", "readr", "reprex", "rlang", "robustbase", "roxygen2", "s2", "sandwich", "sass", "sf", "sfheaders", "shinyWidgets", "sp", "stringi", "terra", "testthat", "tidyr", "timechange", "uuid", "vctrs", "viridis", "vroom", "warbleR", "withr", "xml2", "yaml", "zip"))
# Load reticulate library
library(reticulate)
library(dplyr)
library(stringr)
use_virtualenv("E:/SYNC/PROJECTS/scraping/venv")
use_virtualenv("/E:/SYNC/PROJECTS/scraping/venv")
use_virtualenv("E:/SYNC/PROJECTS/scraping/venv")
use_virtualenv("C:\Users\adamu\env")
# Load reticulate library
library(reticulate)
library(dplyr)
library(stringr)
use_virtualenv("C:\Users\adamu\env")
use_virtualenv("C:/Users/adamu/env")
# Function to extract methods chapter from text
extract_methods <- function(text, method_keywords) {
methods_sections <- list()
for (keyword in method_keywords) {
pattern <- paste0("(?i)\\b", keyword, "\\b.+?(?=^(?:\\w|Discussion|Results|$))")
matches <- stringr::str_extract_all(text, pattern)
methods_sections <- c(methods_sections, matches)
}
return(methods_sections)
}
# Function to extract tables from PDF
extract_tables <- function(pdf_path) {
tabula <- import("tabula")
tables <- tabula$read_pdf(pdf_path, pages = "all", multiple_tables = TRUE, silent = TRUE)
return(tables)
}
# Function to save all tables from a PDF to separate CSV files
save_all_tables_to_csv <- function(tables, csv_prefix) {
for (idx in seq_along(tables)) {
csv_file <- paste0(csv_prefix, "_table_", idx, ".csv")
if (!is.null(tables[[idx]])) {
write.csv(tables[[idx]], csv_file, row.names = FALSE)
cat("Table", idx, "saved to", csv_file, "\n")
} else {
cat("Table", idx, "is empty. CSV not saved.\n")
}
}
}
# Function to save methods chapter to a text file
save_methods_to_text <- function(methods_text, txt_file) {
if (length(methods_text) > 0) {
methods_text <- paste(methods_text, collapse = "\n\n")
cat(methods_text, file = txt_file)
cat("Methods chapter saved to", txt_file, "\n")
} else {
cat("No methods chapter found in the PDF. Text file not saved.\n")
}
}
# Main function to process PDFs and extract tables and methods
process_pdfs_and_extract_tables_and_methods <- function(folder_path, method_keywords) {
for (filename in list.files(folder_path, pattern = "\\.pdf$", full.names = TRUE)) {
# Create a folder for each PDF's content
scrape_folder <- paste0(dirname(filename), "/", gsub(".pdf", "_scrape", basename(filename)))
dir.create(scrape_folder, showWarnings = FALSE)
# Extract tables from the PDF
tables <- extract_tables(filename)
# Save all tables to separate CSV files
save_all_tables_to_csv(tables, paste0(scrape_folder, "/", gsub(".pdf", "", basename(filename))))
# Extract methods chapter from PDF text
text <- readLines(filename)
methods_text <- extract_methods(text, method_keywords)
# Save methods chapter to a text file
methods_txt_file <- paste0(scrape_folder, "/methods.txt")
save_methods_to_text(methods_text, methods_txt_file)
}
}
# Example usage:
folder_path <- "E:/SYNC/DP/papers/test"
method_keywords <- c("methods", "methodology", "experimental procedures", "method")
process_pdfs_and_extract_tables_and_methods(folder_path, method_keywords)
process_pdfs_and_extract_tables_and_methods(folder_path, method_keywords)
# Load required libraries
library(tabulizer)
install.packages("tabulizer")
# Load required libraries
library(tabulizer)
install.packages("tabula")
use_virtualenv("C:/Users/adamu/.conda/envs/venv1")
use_condaenv("C:/Users/adamu/.conda/envs/venv1")
# Load reticulate library
library(reticulate)
library(dplyr)
library(stringr)
use_condaenv("C:/Users/adamu/.conda/envs/venv1")
# Function to extract methods chapter from text
extract_methods <- function(text, method_keywords) {
methods_sections <- list()
for (keyword in method_keywords) {
pattern <- paste0("(?i)\\b", keyword, "\\b.+?(?=^(?:\\w|Discussion|Results|$))")
matches <- stringr::str_extract_all(text, pattern)
methods_sections <- c(methods_sections, matches)
}
return(methods_sections)
}
# Function to extract tables from PDF
extract_tables <- function(pdf_path) {
tabula <- import("tabula")
tables <- tabula$read_pdf(pdf_path, pages = "all", multiple_tables = TRUE, silent = TRUE)
return(tables)
}
# Function to save all tables from a PDF to separate CSV files
save_all_tables_to_csv <- function(tables, csv_prefix) {
for (idx in seq_along(tables)) {
csv_file <- paste0(csv_prefix, "_table_", idx, ".csv")
if (!is.null(tables[[idx]])) {
write.csv(tables[[idx]], csv_file, row.names = FALSE)
cat("Table", idx, "saved to", csv_file, "\n")
} else {
cat("Table", idx, "is empty. CSV not saved.\n")
}
}
}
# Function to save methods chapter to a text file
save_methods_to_text <- function(methods_text, txt_file) {
if (length(methods_text) > 0) {
methods_text <- paste(methods_text, collapse = "\n\n")
cat(methods_text, file = txt_file)
cat("Methods chapter saved to", txt_file, "\n")
} else {
cat("No methods chapter found in the PDF. Text file not saved.\n")
}
}
# Main function to process PDFs and extract tables and methods
process_pdfs_and_extract_tables_and_methods <- function(folder_path, method_keywords) {
for (filename in list.files(folder_path, pattern = "\\.pdf$", full.names = TRUE)) {
# Create a folder for each PDF's content
scrape_folder <- paste0(dirname(filename), "/", gsub(".pdf", "_scrape", basename(filename)))
dir.create(scrape_folder, showWarnings = FALSE)
# Extract tables from the PDF
tables <- extract_tables(filename)
# Save all tables to separate CSV files
save_all_tables_to_csv(tables, paste0(scrape_folder, "/", gsub(".pdf", "", basename(filename))))
# Extract methods chapter from PDF text
text <- readLines(filename)
methods_text <- extract_methods(text, method_keywords)
# Save methods chapter to a text file
methods_txt_file <- paste0(scrape_folder, "/methods.txt")
save_methods_to_text(methods_text, methods_txt_file)
}
}
# Example usage:
folder_path <- "E:/SYNC/DP/papers/test"
method_keywords <- c("methods", "methodology", "experimental procedures", "method")
process_pdfs_and_extract_tables_and_methods(folder_path, method_keywords)
install.packages("tabula")
# Load required libraries
library(tabula)
# Function to extract tables from PDF using tabula
extract_tables <- function(pdf_path) {
tables <- tabula::extract_pages(pdf_path, output = "data.frame")
return(tables)
}
# Main function to process PDFs and extract tables
process_pdfs_and_extract_tables <- function(folder_path) {
for (filename in list.files(folder_path, pattern = "\\.pdf$", full.names = TRUE)) {
# Extract tables from the PDF
tables <- extract_tables(filename)
# Print the extracted tables
print(tables)
}
}
# Example usage:
folder_path <- "path_to_your_folder"
process_pdfs_and_extract_tables(folder_path)
View(extract_methods)
library(NSNSDAcoustics)
up_east <- birdnet_gather(
results.directory = 'E:/SYNC/WORK_CZU/res_SMU05982_up_east',
formatted = F
)
View(up_east)
# format data
birdnet_format(results.directory = 'E:/SYNC/WORK_CZU/res_SMU05982_up_east')
# format data
birdnet_format(results.directory = 'E:/SYNC/WORK_CZU/res_SMU05982_up_east', timezone=Europe/Prague)
# format data
birdnet_format(results.directory = 'E:/SYNC/WORK_CZU/res_SMU05982_up_east', timezone=CEST)
# format data
birdnet_format(results.directory = 'E:/SYNC/WORK_CZU/res_SMU05982_up_east', timezone="CEST")
up_east <- birdnet_gather(
results.directory = 'E:/SYNC/WORK_CZU/res_SMU05982_up_east',
formatted = T
)
View(up_east)
?birdnet_verifgy
?birdnet_verify
library(tidyverse)
library(readxl)
library(vegan)
library(dendextend)
library(ape)
library(patchwork)
library(rstudioapi)
library(treemap)
library(ggrepel)
library(Rtapas)
library(RColorBrewer)
################ Importing data ################
setwd(dirname(getActiveDocumentContext()$path))
data_23 <- read_excel("./data/behav_data_23.xlsx")
data_24 <- read_excel("./data/behav_data_24.xlsx")
data_bodovka <- read_excel("./data/bodovka_data_23.xlsx")
data_lit<-read_excel("./data/literature_data.xlsx")
############# Data wrangling ##################
### behavior, delete empty observations, unite columns into species, pivot to long format
data_behav_23 <- data_23 %>%
filter(!is.na(behavior_1)) %>%
unite(col = "druh", genus, species, sep = "_", remove = TRUE) %>%
pivot_longer(cols = c("behavior_1", "behavior_2", "behavior_3", "behavior_4", "behavior_5"),
names_to = "x", values_to = "behav") %>%
select(druh, behav, line ) %>%
na.omit()
data_behav_24 <- data_24 %>%
filter(!is.na(behavior_1)) %>%
unite(col = "druh", genus, species, sep = "_", remove = TRUE) %>%
pivot_longer(cols = c("behavior_1", "behavior_2", "behavior_3", "behavior_4", "behavior_5"),
names_to = "x", values_to = "behav") %>%
select(druh, behav, line ) %>%
na.omit()
### substrate, delete empty observations, unite columns into species, pivot to long format
data_substrate_23 <- data_23 %>%
filter(!is.na(behavior_1)) %>%
unite(col = "druh", genus, species, sep = "_", remove = TRUE) %>%
pivot_longer(cols = c("substrate_main_1", "substrate_main_2", "substrate_main_3",
"substrate_main_4", "substrate_main_5"), names_to = "x", values_to = "substrate") %>%
select(druh, line, substrate) %>%
na.omit(F)
data_substrate_24 <- data_24 %>%
filter(!is.na(behavior_1)) %>%
unite(col = "druh", genus, species, sep = "_", remove = TRUE) %>%
pivot_longer(cols = c("substrate_main_1", "substrate_main_2", "substrate_main_3",
"substrate_main_4", "substrate_main_5"), names_to = "x", values_to = "substrate") %>%
select(druh, line, substrate) %>%
na.omit(F)
### fine substrate, delete empty observations, unite columns into species, pivot to long format
data_substrate_fine_23 <-data_23 %>%
filter(!is.na(behavior_1)) %>%
unite(col = "druh", genus, species, sep = "_", remove = TRUE) %>%
pivot_longer(cols = c("substrate_fine_1", "substrate_fine_2", "substrate_fine_3",
"substrate_fine_4", "substrate_fine_5"), names_to = "x",
values_to = "substrate_fine", values_drop_na = T) %>%
select(druh, line, substrate_fine)
data_substrate_fine_24 <-data_24 %>%
filter(!is.na(behavior_1)) %>%
unite(col = "druh", genus, species, sep = "_", remove = TRUE) %>%
pivot_longer(cols = c("substrate_fine_1", "substrate_fine_2", "substrate_fine_3",
"substrate_fine_4", "substrate_fine_5"), names_to = "x",
values_to = "substrate_fine", values_drop_na = T) %>%
select(druh, line, substrate_fine)
### literature data
data_lit_behav <- data_lit %>%
select(species_orig,flycatch,glean,hover_snatch,snatch,pounce, probe)%>%
pivot_longer(cols=c("flycatch","glean","hover_snatch","snatch","pounce", "probe"), names_to="behav",values_to="x")
data_lit_substrate <- data_lit %>%
select(species_orig, air, bark, flower, ground, leaf, other)%>%
pivot_longer(cols=c("air","bark","flower","ground","leaf","other"), names_to="substrate",values_to="x")
### point transect, unite columns, remove non-oscines, count observations
data_bodovka_sp <- data_bodovka %>%
unite(col = "druh", Genus, Species, sep= "_", remove =TRUE) %>%
group_by(Datum, druh)%>%
filter(!(druh=="Columba_oenas"| druh=="Columba_palumbus"| druh=="Buteo_buteo"| druh=="Cuculus_canorus"| druh=="Corvus_corax"| druh=="Dryocopus_martius"| druh=="Dendrocopos_medius"| druh=="Dendrocopos_major"| druh=="Garrulus_glandarius"))%>%
count()
############### Point transect results #######################
## square plot pro presence/absence z bodovky
ggplot(data_bodovka_sp) +
aes(x = Datum, y = druh, fill = n) +
geom_tile(linewidth = 1.2) +
scale_fill_distiller(palette = "Blues", direction = 1) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_x_continuous(labels = as.Date(data_bodovka_sp$Datum), breaks = data_bodovka_sp$Datum)
## bubble plot
ggplot(data_bodovka_sp, aes(Datum, druh)) +
geom_point(aes(size = n), colour = "blue", fill = "blue", shape = 21, ) +
labs(x = "", y = "") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_x_continuous(labels = as.Date(data_bodovka_sp$Datum), breaks = data_bodovka_sp$Datum)
## transformace dat pro porovnani
data_freq_bodovka<- data_bodovka %>%
unite(col = "druh", Genus, Species, sep= "_", remove =TRUE) %>%
group_by(druh)%>%
filter(!(druh=="Columba_oenas"| druh=="Columba_palumbus"| druh=="Buteo_buteo"| druh=="Cuculus_canorus"| druh=="Corvus_corax"| druh=="Dryocopus_martius"| druh=="Dendrocopos_medius"| druh=="Dendrocopos_major"| druh=="Garrulus_glandarius"))%>%
count()%>%
summarise(n)%>%
mutate(prop_bodovka = proportions(n))
data_freq_behav_23 <- data_behav_23%>%
group_by(druh)%>%
count()%>%
summarise(n)%>%
mutate(prop_behav=proportions(n))
data_freq_behav_24 <- data_behav_24%>%
group_by(druh)%>%
count()%>%
summarise(n)%>%
mutate(prop_behav=proportions(n))
## treemap zastoupení druhu bodovka vs pozorovani
treemap_bodovka<-treemap(data_freq_bodovka,
index="druh",
vSize="n",
type="index",
title="freq point transect"
)
treemap_behav_23<-treemap(data_freq_behav_23,
index="druh",
vSize="n",
type="index",
title="freq obs behav 23"
)
treemap_behav_24<-treemap(data_freq_behav_24,
index="druh",
vSize="n",
type="index",
title="freq obs behav 24"
)
## frekvenční tabulka
data_freq_compare<-merge(data_freq_bodovka, data_freq_behav_23, by="druh", all=TRUE)
data_freq_compare_behav<-merge(data_freq_behav_23, data_freq_behav_24, by="druh", all=TRUE)
# display graphs
treemap_bodovka
treemap_behav_23
treemap_behav_24
# number of species observed
data_behav_23 %>%
summarize(distinct_species = n_distinct(druh))
#2023 n=25
data_behav_24 %>%
summarize(distinct_species = n_distinct(druh))
#2024 n=23
## proporce druhu na bodovce vs pozorování
ggplot(data_freq_compare) +
aes(x = prop_behav, y = prop_bodovka) +
geom_point(
shape = "asterisk",
size = 1.45,
colour = "#0C350C"
) +
labs(
x = "Proportion of behavioral observations",
y = "Proportion of observations in point transect"
) +
theme_bw() +
xlim(0, 0.2) +
ylim(0, 0.2) + geom_abline()+ geom_text(label=data_freq_compare$druh)
# rozdíly mezi roky 23 a 24
ggplot(data_freq_compare_behav) +
aes(x = prop_behav.x, y = prop_behav.y) +
geom_point(
shape = "asterisk",
size = 1.45,
colour = "#0C350C"
) +
labs(
x = "Proportion of behavioral observations 2023",
y = "Proportion of behavioral observations 2024"
) +
theme_bw() +
xlim(0, 0.2) +
ylim(0, 0.2) + geom_abline()+ geom_text(label=data_freq_compare_behav$druh)
############ Graphs for behavior and substrate #############
#tabulka s počty foraging actions
tabulka_behav_23 <- as.data.frame.matrix( table(data_behav_23$line, data_behav_23$behav) )
tabulka_behav_24 <- as.data.frame.matrix( table(data_behav_24$line, data_behav_24$behav) )
# histogram výšky pozorování foraging actions
ggplot(data = data_23, aes(x = bird_height)) +
geom_histogram(binwidth = 1)
# abundancni matice pro linie:
tabulka_abundance_behav <- as.data.frame.matrix( table(data_sp$line, data_sp$druh) )
method23<-ggplot(data_behav_23, aes(x = line, fill = behav)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.title = element_blank(), axis.text.x=element_blank(), legend.background = element_rect(fill='transparent'),
axis.ticks.x=element_blank())+
geom_bar(position="fill")+
scale_y_continuous(labels = scales::percent, expand = c(0, 0), limits = c(0, NA)) +
scale_fill_manual(
values = c(flycatach = "#0cf0e8",
glean = "#06c24b",
hang_glean = "#8B7500",
hover_snatch = "#9606c2",
manipulation = "#0677c2",
pounce = "#2F4F4F",
probe = "#c2b906",
snatch = "#ed8105"))+
labs(x="", y="", title = "Foraging method 2023")
method24<-ggplot(data_behav_24, aes(x = line, fill = behav)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.title = element_blank(), axis.text.x=element_blank(), legend.background = element_rect(fill='transparent'),
axis.ticks.x=element_blank())+
geom_bar(position="fill")+
scale_y_continuous(labels = scales::percent, expand = c(0, 0), limits = c(0, NA)) +
scale_fill_manual(
values = c(flycatach = "#0cf0e8",
glean = "#06c24b",
hang_glean = "#8B7500",
hover_snatch = "#9606c2",
manipulation = "#0677c2",
pounce = "#2F4F4F",
probe = "#c2b906",
snatch = "#ed8105"))+
labs(x="", y="", title = "Foraging method 2024")
method23+method24
## graf frekvenci vyuziti substratu
substrate23<-ggplot(data_substrate_23, aes(x = line, fill = substrate)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),legend.title = element_blank(),axis.text.x=element_blank(),legend.background = element_rect(fill='transparent'),
axis.ticks.x=element_blank())+
geom_bar(position="fill")+
scale_y_continuous(labels = scales::percent, expand = c(0, 0), limits = c(0, NA)) +scale_fill_manual(
values = c(air = "#AEEEEE",
bark = "#F5DEB3",
ground = "#8B7500",
leaf = "#556B2F",
other = "#2F4F4F"))+
labs(x="", y="", title = "Foraging substrate 2023")
substrate24<-ggplot(data_substrate_24, aes(x = line, fill = substrate)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),legend.title = element_blank(),axis.text.x=element_blank(),legend.background = element_rect(fill='transparent'),
axis.ticks.x=element_blank())+
geom_bar(position="fill")+
scale_y_continuous(labels = scales::percent, expand = c(0, 0), limits = c(0, NA)) +scale_fill_manual(
values = c(air = "#AEEEEE",
bark = "#F5DEB3",
ground = "#8B7500",
leaf = "#556B2F",
other = "#2F4F4F"))+
labs(x="", y="", title = "Foraging substrate 2024")
substrate23 + substrate24
# preference for foliage density and distance from stem
## foliage density
foliage_23<- data_23%>%
filter(!is.na(dist_stem))%>%
drop_na(foliage_dens)%>%
ggplot(aes(x = line, fill = factor(foliage_dens, levels=c("low", "medium", "high")))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),legend.title = element_blank())+
geom_bar(position="fill", color= "black")+
scale_y_continuous(labels = scales::percent, expand = c(0, 0), limits = c(0, NA)) +
scale_fill_brewer(palette = "Greens")+
labs(x="linie", y="", title = "Foliage density 2023")
foliage_24<- data_24%>%
filter(!is.na(dist_stem))%>%
drop_na(foliage_dens)%>%
ggplot(aes(x = line, fill = factor(foliage_dens, levels=c("low", "medium", "high")))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),legend.title = element_blank())+
geom_bar(position="fill", color= "black")+
scale_y_continuous(labels = scales::percent, expand = c(0, 0), limits = c(0, NA)) +
scale_fill_brewer(palette = "Greens")+
labs(x="linie", y="", title = "Foliage density 2024")
foliage_23+foliage_24
## distance from stem
distance_23<-data_23%>%
drop_na(dist_stem)%>%
ggplot(aes(x = line, fill = factor(dist_stem, levels=c("edge", "outer", "inner", "stem")))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),legend.title = element_blank())+
geom_bar(position="fill", color= "black")+
scale_y_continuous(labels = scales::percent, expand = c(0, 0), limits = c(0, NA)) +
scale_fill_brewer(palette = "Oranges")+
labs(x="linie", y="", title = "Distance from stem_23")
distance_24<-data_24%>%
drop_na(dist_stem)%>%
ggplot(aes(x = line, fill = factor(dist_stem, levels=c("edge", "outer", "inner", "stem")))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"),legend.title = element_blank())+
geom_bar(position="fill", color= "black")+
scale_y_continuous(labels = scales::percent, expand = c(0, 0), limits = c(0, NA)) +
scale_fill_brewer(palette = "Oranges")+
labs(x="linie", y="", title = "Distance from stem_24")
distance_23+distance_24
